version: 2.1

orbs:
  docker: circleci/docker@2.1.4

executors:
  clojure:
    docker:
      - image: cimg/openjdk:23.0.1
    working_directory: ~/nevergreen

commands:
  init:
    parameters:
      checkout:
        description: 'true to checkout Nevergreen from source control, false to attach the workspace'
        type: boolean
        default: true
      after:
        description: 'Steps to execute after the environment has been initialised'
        type: steps
    steps:
      - when:
          condition: << parameters.checkout >>
          steps:
            - checkout

      - unless:
          condition: << parameters.checkout >>
          steps:
            - attach_workspace:
                at: ~/nevergreen

      - restore_cache:
          keys:
            - v8-nevergreen-ui-{{ checksum ".nvmrc" }}-{{ checksum "package-lock.json" }}
            - v8-nevergreen-ui-{{ checksum ".nvmrc" }}- # fall back to any cache for the current version of node

      - restore_cache:
          keys:
            - v4-nevergreen-server-{{ checksum "project.clj" }}

      - run:
          name: install node
          command: ./.circleci/install-node.sh

      - steps: << parameters.after >>

  deploy-nevergreen:
    parameters:
      host:
        description: 'The host being deployed to'
        type: string
      docker-tag:
        description: 'The Docker tag to push'
        type: string
      deploy:
        description: 'The steps to run to actually deploy'
        type: steps
      after-deployment:
        description: 'The steps to run after successfully deploying'
        type: steps
        default: []
    steps:
      - docker/install-docker

      - attach_workspace:
          at: ~/nevergreen

      - add_ssh_keys:
          fingerprints:
            - '84:1d:85:ed:80:92:c5:21:53:15:54:b9:52:99:29:35'

      - run:
          name: add nevergreen.io to known hosts
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan 35.176.75.186 >> ~/.ssh/known_hosts

      - run:
          name: export version
          command: ./.circleci/export-version.sh

      - steps: << parameters.deploy >>

      - run:
          name: smoke test
          environment:
            HOST: << parameters.host >>
          command: ./.circleci/smoke-test.sh

      - setup_remote_docker:
          docker_layer_caching: false

      - docker/check

      - docker/build:
          image: buildcanariesteam/nevergreen
          tag: << parameters.docker-tag >>

      - docker/push:
          image: buildcanariesteam/nevergreen
          tag: << parameters.docker-tag >>

      - steps: << parameters.after-deployment >>

jobs:
  build:
    executor: clojure
    steps:
      - init:
          after:
            - run:
                name: update version
                command: ./.circleci/update-version.sh

            - run:
                name: build
                environment:
                  BASH_ENV: '~/.nvm/nvm.sh'
                command: |
                  ./.circleci/dependencies.sh
                  ./.circleci/compile.sh

            - save_cache:
                key: v4-nevergreen-server-{{ checksum "project.clj" }}
                paths:
                  - ~/.m2
                  - ~/.lein
            - save_cache:
                key: v8-nevergreen-ui-{{ checksum ".nvmrc" }}-{{ checksum "package-lock.json" }}
                paths:
                  - ~/.nvm
                  - ~/.npm
                  - ~/.cache

            - run:
                name: test
                environment:
                  BASH_ENV: '~/.nvm/nvm.sh'
                command: ./.circleci/test.sh

            - store_test_results:
                path: ./target/test-reports

            - store_artifacts:
                path: ./target/nevergreen-standalone.jar
            - store_artifacts:
                path: ./target/coverage-reports

            - persist_to_workspace:
                root: .
                paths:
                  - ./resources/*.txt
                  - ./.circleci/*
                  - ./target/nevergreen-standalone.jar
                  - ./Dockerfile
                  - ./package.json
                  - ./package-lock.json
                  - ./.nvmrc
                  - ./project.clj
                  - ./cypress.config.ts
                  - ./journey/*
                  - ./tsconfig.json

  journey-tests:
    docker:
      - image: cypress/base:22.0.0
    working_directory: ~/nevergreen
    steps:
      - run:
          command: apt-get update && apt-get install -y curl
      - init:
          checkout: false
          after:
            - run:
                name: functional tests
                environment:
                  BASH_ENV: '~/.nvm/nvm.sh'
                  CYPRESS_BASE_URL: 'https://staging.nevergreen.io'
                  CYPRESS_TRAY_URL: 'https://raw.githubusercontent.com/build-canaries/nevergreen/main/cctray_xml_feed_mock/resources/cctray.xml'
                  CYPRESS_TRAY_URL_TOKEN: ''
                  CYPRESS_TRAY_TOKEN: ''
                  CYPRESS_TRAY_USERNAME: ''
                  CYPRESS_TRAY_PASSWORD: ''
                command: |
                  npm ci
                  npm run test:journey

            - store_test_results:
                path: ./target/test-reports

            - store_artifacts:
                path: ./target/test-reports/journey

  deploy-staging:
    executor: clojure
    steps:
      - deploy-nevergreen:
          host: 'https://staging.nevergreen.io'
          docker-tag: staging
          deploy:
            - run: ./.circleci/deploy.sh

  deploy-prod:
    executor: clojure
    steps:
      - deploy-nevergreen:
          host: 'https://nevergreen.io'
          docker-tag: ${VERSION}
          deploy:
            - run: ./.circleci/release.sh
          after-deployment:
            - run:
                name: tag Docker image as latest
                command: docker tag buildcanariesteam/nevergreen:${VERSION} buildcanariesteam/nevergreen:latest

            - docker/push:
                image: buildcanariesteam/nevergreen
                tag: latest

            - run:
                name: create release on GitHub
                command: ./.circleci/release-github.sh

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy-staging:
          requires:
            - build
          filters:
            branches:
              only:
                - main
      - journey-tests:
          requires:
            - deploy-staging
      - hold:
          type: approval
          requires:
            - journey-tests
      - deploy-prod:
          requires:
            - hold
